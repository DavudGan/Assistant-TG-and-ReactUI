import { Markup } from 'telegraf';

export const BUTTONS = {
  TASK_LIST: 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á',
  EDIT_TASK: '‚úçüèº –ò–∑–º–µ–Ω–∏—Ç –∑–∞–¥–∞—á—É',
  DELETE_TASK: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç –∑–∞–¥–∞—á—É',
  ADD_TASK: 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∫—É',
  DOUN_TASK: '‚úÖ –°–¥–µ–ª–∞–ª –∑–∞–¥–∞—á–∫—É',
};

export const previewTask = (task) =>
  `–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üíÅüèº: \n\n${task
    .map(
      (item) =>
        (item.isCompleted ? '‚úÖ ' : '‚ùå ') + item.id + item.text + '\n\n',
    )
    .join('')}`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
export function renderTasks(tasks, page = 1, pageSize = 5) {
  const totalPages = Math.ceil(tasks.length / pageSize);
  const currentTasks = tasks.slice((page - 1) * pageSize, page * pageSize);

  const taskButtons = currentTasks.flatMap((task) => [
    // [
    //   // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
    //   Markup.button.callback(`‚¨áÔ∏è–ó–∞–¥–∞—á–∞‚¨áÔ∏è`, 'ignore'),
    // ],
    [
      // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–¥–∞—á–∞
      Markup.button.callback(
        `${task.isCompleted ? '‚úÖ' : '‚ùå'} ${task.text}`,
        `ignore`,
      ),
    ],
    [
      // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      Markup.button.callback('ü•Ç –ó–∞–≤–µ—Ä—à–∏—Ç—å', `done_${task.id}`),
      Markup.button.callback('‚úçüèº –ò–∑–º–µ–Ω–∏—Ç', `edit_${task.id}`),
      Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å', `delete_${task.id}`),
    ],
  ]);

  const paginationButtons = [];
  if (page > 1) {
    paginationButtons.push(
      Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', `page_${page - 1}`),
    );
  }
  if (page < totalPages) {
    paginationButtons.push(
      Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è', `page_${page + 1}`),
    );
  }

  return Markup.inlineKeyboard([...taskButtons, paginationButtons], {
    columns: 1,
  });
}
