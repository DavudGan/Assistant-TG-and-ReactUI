import { TasksService } from './tasks.service';

import { Injectable } from '@nestjs/common';
import {
  Action,
  Ctx,
  Hears,
  InjectBot,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { actionButton } from '../app.buttons';
import { Context } from '../context.interface';
import { BUTTONS, renderTasks, renderTask } from './task-utils';

@Update()
@Injectable()
export class TasksController {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly tasksService: TasksService,
  ) {}
  @Start()
  async startCommand(ctx: Context) {
    const userName = ctx.from?.first_name || '–¥—Ä—É–≥';
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${userName}! üòú\n\n –ù–∞—á–Ω–µ–º –¥–µ–Ω—å —Å –∫–æ—Ñ–µ ‚òïÔ∏è –∏ –∑–∞–¥–∞—á–µ–∫? ü•∏`,
      actionButton(),
    );
  }

  @Hears(BUTTONS.TASK_LIST)
  async getAll(ctx: Context) {
    const userId = ctx.message.from.id;
    const todos = await this.tasksService.getAll(userId);

    if (todos.length === 0) {
      return ctx.reply('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á–µ–∫! üòï');
    }

    if (ctx.message) {
      await ctx.deleteMessage(); // –£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ session
    if (!ctx.session.page) {
      ctx.session.page = 1; // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }

    await ctx.reply('–ó–∞–¥–∞—á–∏ üìã:', renderTasks(todos, ctx.session.page));
  }

  @Action(/page_(\d+)/)
  async changePage(@Ctx() ctx: Context & { match: RegExpMatchArray }) {
    const userId = ctx.callbackQuery.from.id;
    const page = Number(ctx.match[1]);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const todos = await this.tasksService.getAll(userId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ session
    ctx.session.page = page;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await ctx.editMessageText(
      '–í–æ—Ç —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏ –¥—Ä—É–≥:',
      renderTasks(todos, page),
    );
  }

  @Action(/task_(\d+)/)
  async task(@Ctx() ctx: Context & { match: RegExpMatchArray }) {
    const taskId = Number(ctx.match[1]);
    const userId = ctx.callbackQuery.from.id;
    const task = await this.tasksService.getById(taskId, userId);

    await renderTask(ctx, task.title, task.description, task.date, task.time);
  }

  @Action(/done_(\d+)/)
  async doneTask(@Ctx() ctx: Context & { match: RegExpMatchArray }) {
    const taskId = Number(ctx.match[1]);
    const userId = ctx.callbackQuery.from.id;

    await this.tasksService.doneTask(taskId, userId);
    await ctx.editMessageText('–§—É—Ö, –¥–æ–ª–æ–π –∑–∞–¥–∞—á–∏! ‚úÖ');
  }

  @Action(/edit_(\d+)/)
  async editTask(@Ctx() ctx: Context & { match: RegExpMatchArray }) {
    const taskId = Number(ctx.match[1]);
    ctx.session = { type: 'edit', taskId: taskId };
    await ctx.reply('–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ üôà:');
    // await this.tasksService.editTaskTask(taskId, userId, newName);
  }

  @Action(/delete_(\d+)/)
  async removeTask(@Ctx() ctx: Context & { match: RegExpMatchArray }) {
    const taskId = Number(ctx.match[1]);
    const userId = ctx.callbackQuery.from.id;

    await this.tasksService.deleteTask(taskId, userId);
    await ctx.editMessageText('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞! üóë');
  }

  @Action('setDate')
  async setDate(@Ctx() ctx: Context) {
    await ctx.reply('–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n\n–ü—Ä–∏–º–µ—Ä: 17.06.2000');
    ctx.session.type = 'add_date';
  }

  @Hears(BUTTONS.ADD_TASK)
  async addTask(ctx: Context) {
    ctx.session.type = 'add_title';
    await ctx.reply(`–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º –∑–∞–¥–∞—á–∫—É?`);
  }

  @On('text')
  async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
    const userId = ctx.message.from.id;
    if (!ctx.session.type) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (ctx.session?.type === 'edit' && ctx.session?.taskId) {
      const taskId = ctx.session.taskId;
      const newName = message;

      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      ctx.session = null;

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏
      const updatedTask = await this.tasksService.editTask(
        taskId,
        userId,
        newName,
      );

      if (updatedTask) {
        await ctx.reply(`‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: "${newName}"`);
      } else {
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
        );
      }
      return;
    }

    if (ctx.session.type === 'add_title') {
      ctx.session.taskTitle = message;
      ctx.session.type = 'add_description';
      await ctx.reply('–ö—Ä—É—Ç–æ, –¥–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∑–∞–¥–∞—á–∫–µ:');
      return;
    }

    if (ctx.session.type === 'add_description') {
      ctx.session.taskDescription = message;
      await ctx.reply(
        '–£—Å—Ç–∞–Ω–æ–≤–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ —è –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ –∑–∞–¥–∞—á–µ üìÖ?',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–î–∞', callback_data: 'setDate' }],
              [{ text: '–ù–µ—Ç', callback_data: 'setDate' }],
            ],
          },
        },
      );
      return;
    }

    if (ctx.session.type === 'add_date') {
      const date = message.trim();
      const dateRegex = /^\d{2}\.\d{2}\.\d{4}$/;

      if (!dateRegex.test(date)) {
        await ctx.reply(
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã üôä! –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n\n–ü—Ä–∏–º–µ—Ä: 17.06.2000',
        );
        return;
      }

      const [day, month, year] = date.split('.').map(Number);
      const validDate = new Date(year, month - 1, day);

      if (
        validDate.getFullYear() !== year ||
        validDate.getMonth() + 1 !== month ||
        validDate.getDate() !== day
      ) {
        await ctx.reply('‚ùå –¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üôà! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.');
        return;
      }

      ctx.session.taskDate = date;
      await ctx.reply(
        '‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–ß:–ú–ú\n\n–ü—Ä–∏–º–µ—Ä: 20:13',
      );
      ctx.session.type = 'add_time';
      return;
    }

    if (ctx.session.type === 'add_time') {
      const time = message.trim();
      const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/;

      if (!timeRegex.test(time)) {
        await ctx.reply(
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ üôà! –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–ß:–ú–ú\n\n–ü—Ä–∏–º–µ—Ä: 20:13',
        );
        return;
      }

      ctx.session.taskTime = time;

      const title = ctx.session.taskTitle;
      const description = ctx.session.taskDescription;
      const date = ctx.session.taskDate;

      await this.tasksService.addTask(title, description, date, time, userId);

      await renderTask(ctx, title, description, date, time);

      ctx.session = null;
      return;
    }
  }
}
