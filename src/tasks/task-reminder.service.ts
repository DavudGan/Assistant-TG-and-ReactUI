import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { TasksService } from './tasks.service';
import { Cron } from '@nestjs/schedule';
import { Telegraf } from 'telegraf';
import { InjectBot } from 'nestjs-telegraf';
import { Context } from '../context.interface';
import * as dayjs from 'dayjs';

@Injectable()
export class TaskReminderService implements OnModuleInit {
  private readonly logger = new Logger(TaskReminderService.name);

  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly tasksService: TasksService,
  ) {}

  onModuleInit() {
    this.logger.log('TaskReminderService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
  }

  @Cron('*/1 * * * *') // –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  async checkTasks() {
    const now = dayjs().format('DD.MM.YYYY HH:mm');
    const tasksToRemind = await this.tasksService.getTasksToRemind(now);

    for (const task of tasksToRemind) {
      await this.bot.telegram.sendMessage(
        task.userId,
        `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ:\n\nüìå *${task.title}*\n üìù *${task.description}*\n üìÖ *${task.date}*\n ‚è∞ *${task.time}*`,
        { parse_mode: 'Markdown' },
      );

      // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É —á—Ç–æ–±—ã –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–Ω–æ–≤–∞
      await this.tasksService.markTaskAsReminded(task.id);
    }
  }
}
